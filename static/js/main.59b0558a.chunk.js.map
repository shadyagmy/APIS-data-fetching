{"version":3,"sources":["components/User.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["User","_ref","details","react_default","a","createElement","className","name","username","email","address","street","suite","city","zipcode","geo","lat","lng","phone","website","company","catchPhrase","bs","Post","title","body","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","users","posts","_this2","fetch","then","response","json","setState","map","user","key","id","User_User","Post_Post","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59b0558a.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./User.css\";\r\n\r\nexport default function User({details}) {\r\n  \r\n  return (\r\n    <div className=\"user\">\r\n      <h1>{details.name}</h1>\r\n      <h2><i className=\"fas fa-user-alt\"></i>{details.username}</h2>\r\n      <ul>\r\n        <li><i className=\"fas fa-envelope\"></i>{details.email}</li>\r\n        <li><i className=\"fas fa-location-arrow\"></i>\r\n          {details.address.street},{\" \"}\r\n          {details.address.suite},{\" \"} \r\n          {details.address.city},{\" \"} \r\n          {details.address.zipcode}\r\n        </li>\r\n        <li><i className=\"fas fa-map-marker-alt\"></i>Lat: {details.address.geo.lat},{\" \"}Lng: {details.address.geo.lng}</li>\r\n        <li><i className=\"fas fa-mobile-alt\"></i>{details.phone}</li>\r\n        <li><i className=\"fas fa-globe\"></i>{details.website}</li>\r\n        <li><i className=\"far fa-building\"></i>\r\n            <ul>\r\n              <li><h4>{details.company.name}</h4></li>\r\n              <li>{details.company.catchPhrase} </li>\r\n              <li>{details.company.bs} </li>\r\n            </ul>\r\n        </li>\r\n\r\n      </ul>\r\n     \r\n      \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport \"./Post.css\";\r\n\r\nexport default function Post({details}) {\r\n  \r\n  return (\r\n    <div className=\"post\">\r\n        <h3>{details.title}</h3>\r\n         <p>{details.body}</p>\r\n         \r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport \"./App.css\";\r\n\r\nimport User from \"./components/User\";\r\nimport Post from \"./components/Post\";\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            users : [],\r\n            posts : []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response=> response.json())\r\n        .then(users => this.setState({users : users}));\r\n\r\n        fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n        .then(response=> response.json())\r\n        .then(posts => this.setState({posts : posts}));\r\n        \r\n    }\r\n    \r\n    \r\n  render() {\r\n    const users = this.state.users;\r\n    const posts = this.state.posts;\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"heading__container\">\r\n                <h1 className=\"heading\">USERS</h1>\r\n            </div>\r\n            \r\n            <div className=\"userContainer\">\r\n                {\r\n                    users.map(user => {\r\n                        return  <div key={user.id}>\r\n                            <User  details={user} />\r\n                        </div>    \r\n                    })\r\n                }\r\n            </div>\r\n\r\n            <div className=\"heading__container\">\r\n                <h1 className=\"heading posts__heading\">Posts</h1>\r\n            </div>\r\n\r\n            <div className=\"postsContainer\">\r\n                {\r\n                    posts.map(user => {\r\n                        return  <div key={user.id}>\r\n                            <Post  details={user} />\r\n                        </div>    \r\n                    })\r\n                }\r\n            </div>\r\n     </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( <App/>, document.getElementById('root'));\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}